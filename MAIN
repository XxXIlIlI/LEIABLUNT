(function () {
    // ===== CONFIG PRINCIPAL =====
    let intervalId = null;
    let features = {
        pageTime: 60,
        autorevive: true
    };

    // ===== FUNÇÕES DE AÇÃO =====
    function updateStatus(text, color = '#aaa') {
        statusElement.innerHTML = `<span style="color:${color};font-weight:bold;">STATUS: ${text}</span>`;
    }

    function clickTarget() {
        const target = document.querySelector('span[data-testid="bonsai-icon-caret-right"]');
        if (target) target.click();
    }

    function startScript() {
        stopScript();
        intervalId = setInterval(() => {
            if (features.autorevive || !document.hidden) clickTarget();
        }, features.pageTime * 1000);
        updateStatus('INICIADO', '#00ff99');
    }

    function stopScript() {
        if (intervalId) {
            clearInterval(intervalId);
            intervalId = null;
            updateStatus('PARADO', '#ff4d4d');
        }
    }

    // ===== ELEMENTOS HUD =====
    const watermark = document.createElement('div');
    const dropdownMenu = document.createElement('div');
    const statusElement = document.createElement('div');

    // Estilo watermark
    Object.assign(watermark.style, {
        position: 'fixed',
        top: '10px',
        left: '85%',
        padding: '8px 16px',
        backgroundColor: 'rgba(0, 0, 0, 0.6)',
        borderRadius: '12px',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        zIndex: '1001',
        cursor: 'pointer',
        userSelect: 'none',
        backdropFilter: 'blur(4px)'
    });

    watermark.innerHTML = `
      <span style="
        font-size: 20px;
        font-weight: bold;
        font-family: 'Segoe UI', sans-serif;
        color: #80bfff;
        text-shadow:
          0 0 5px #80bfff,
          0 0 10px #80bfff,
          0 0 20px #1a75ff,
          0 0 30px #1a75ff;
      ">Leia SP Hack</span>
    `;

    // Arrastar watermark
    let isDragging = false, offsetX, offsetY;
    watermark.addEventListener('mousedown', e => {
        isDragging = true;
        offsetX = e.clientX - watermark.offsetLeft;
        offsetY = e.clientY - watermark.offsetTop;
    });
    document.addEventListener('mouseup', () => isDragging = false);
    document.addEventListener('mousemove', e => {
        if (isDragging) {
            let newX = Math.max(0, Math.min(e.clientX - offsetX, window.innerWidth - watermark.offsetWidth));
            let newY = Math.max(0, Math.min(e.clientY - offsetY, window.innerHeight - watermark.offsetHeight));
            Object.assign(watermark.style, { left: `${newX}px`, top: `${newY}px` });
        }
    });

    // Estilo menu dropdown
    Object.assign(dropdownMenu.style, {
        position: 'absolute',
        top: '100%',
        left: '0',
        width: '220px',
        backgroundColor: '#0b0b0d',
        borderRadius: '8px',
        color: '#80bfff',
        fontSize: '14px',
        fontFamily: 'Segoe UI, sans-serif',
        display: 'none',
        flexDirection: 'column',
        zIndex: '1000',
        padding: '10px',
        boxShadow: '0 0 10px rgba(128, 191, 255, 0.3)',
        border: '1px solid #1a75ff',
        backdropFilter: 'blur(4px)'
    });

    // HTML do menu
    dropdownMenu.innerHTML = `
        <label>Tempo por Página:
            <input type="number" id="pageTime" value="${features.pageTime}" style="width:60px;">
        </label>
        <label style="margin-top:5px;">
            <input type="checkbox" id="autorevive" ${features.autorevive ? 'checked' : ''}> Autorevive
        </label>
        <button id="startBtn" style="margin-top:8px;background:#00ff99;color:black;border:none;padding:5px;border-radius:4px;cursor:pointer;">Iniciar</button>
        <button id="stopBtn" style="margin-top:5px;background:#ff4d4d;color:white;border:none;padding:5px;border-radius:4px;cursor:pointer;">Parar</button>
    `;

    statusElement.style.marginTop = '8px';
    statusElement.style.fontSize = '12px';
    statusElement.style.textAlign = 'center';
    updateStatus('NaN');

    dropdownMenu.appendChild(statusElement);
    watermark.appendChild(dropdownMenu);
    document.body.appendChild(watermark);

    // Abrir/fechar menu
    watermark.addEventListener('click', (e) => {
        if (e.target.tagName === 'SPAN' || e.target === watermark) {
            dropdownMenu.style.display = dropdownMenu.style.display === 'flex' ? 'none' : 'flex';
        }
    });

    // Eventos dos inputs
    dropdownMenu.querySelector('#pageTime').addEventListener('input', e => {
        features.pageTime = parseInt(e.target.value) || 1;
    });

    dropdownMenu.querySelector('#autorevive').addEventListener('change', e => {
        features.autorevive = e.target.checked;
    });

    dropdownMenu.querySelector('#startBtn').addEventListener('click', startScript);
    dropdownMenu.querySelector('#stopBtn').addEventListener('click', stopScript);

    // Controle de visibilidade (para parar se não for autorevive)
    document.addEventListener('visibilitychange', () => {
        if (!features.autorevive && intervalId) {
            if (document.hidden) stopScript();
            else startScript();
        }
    });
})();
